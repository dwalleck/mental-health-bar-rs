// Scheduling repository trait - Interface for schedule data operations

use super::models::*;

#[cfg(test)]
use mockall::automock;

/// Trait defining the interface for scheduling repository operations.
///
/// This trait enables unit testing commands with mock repositories.
/// The concrete `SchedulingRepository` implements this trait for production use.
/// Tests can use `MockSchedulingRepositoryTrait` (auto-generated by mockall).
#[cfg_attr(test, automock)]
pub trait SchedulingRepositoryTrait {
    /// Create a new assessment schedule
    #[must_use = "database operations can fail and must be handled"]
    fn create_schedule(
        &self,
        request: CreateScheduleRequest,
    ) -> Result<AssessmentSchedule, SchedulingError>;

    /// Update an existing schedule
    #[must_use = "database operations can fail and must be handled"]
    fn update_schedule(
        &self,
        id: i32,
        request: UpdateScheduleRequest,
    ) -> Result<AssessmentSchedule, SchedulingError>;

    /// Delete a schedule
    #[must_use = "database operations can fail and must be handled"]
    fn delete_schedule(&self, id: i32) -> Result<(), SchedulingError>;
}
