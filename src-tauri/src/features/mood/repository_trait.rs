// Mood repository trait - Interface for mood data operations
// This trait enables unit testing with mocks while keeping integration tests with real DB

use super::models::*;

#[cfg(test)]
use mockall::automock;

/// Trait defining the interface for mood repository operations.
///
/// This trait is used to enable:
/// - Unit testing commands with mock repositories
/// - Dependency injection
/// - Easier testing of error handling paths
///
/// The concrete `MoodRepository` implements this trait for production use.
/// Tests can use `MockMoodRepositoryTrait` (auto-generated by mockall).
///
/// Note: Uses String instead of &str to avoid lifetime issues with mockall.
#[cfg_attr(test, automock)]
pub trait MoodRepositoryTrait {
    /// Creates a new mood check-in with optional activities and notes.
    #[must_use = "database operations can fail and must be handled"]
    fn create_mood_checkin(
        &self,
        mood_rating: i32,
        activity_ids: Vec<i32>,
        notes: Option<String>,
    ) -> Result<MoodCheckin, MoodError>;

    /// Creates a new activity.
    #[must_use = "database operations can fail and must be handled"]
    fn create_activity(
        &self,
        name: String,
        color: Option<String>,
        icon: Option<String>,
    ) -> Result<Activity, MoodError>;

    /// Updates an existing activity.
    #[must_use = "database operations can fail and must be handled"]
    fn update_activity(
        &self,
        id: i32,
        name: Option<String>,
        color: Option<String>,
        icon: Option<String>,
    ) -> Result<Activity, MoodError>;

    /// Soft-deletes an activity (sets deleted_at timestamp).
    #[must_use = "database operations can fail and must be handled"]
    fn delete_activity(&self, id: i32) -> Result<(), MoodError>;

    /// Deletes a mood check-in and its activity associations.
    #[must_use = "database operations can fail and must be handled"]
    fn delete_mood_checkin(&self, id: i32) -> Result<(), MoodError>;
}
