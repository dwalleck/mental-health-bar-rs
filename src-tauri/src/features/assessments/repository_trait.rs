// Assessment repository trait - Interface for assessment data operations

use super::models::*;

#[cfg(test)]
use mockall::automock;

/// Trait defining the interface for assessment repository operations.
///
/// This trait enables unit testing commands with mock repositories.
/// The concrete `AssessmentRepository` implements this trait for production use.
/// Tests can use `MockAssessmentRepositoryTrait` (auto-generated by mockall).
#[cfg_attr(test, automock)]
pub trait AssessmentRepositoryTrait {
    /// Save a completed assessment
    #[must_use = "database operations can fail and must be handled"]
    fn save_assessment(
        &self,
        assessment_type_id: i32,
        responses: Vec<i32>,
        total_score: i32,
        severity_level: String,
        notes: Option<String>,
    ) -> Result<i32, AssessmentError>;

    /// Get assessment type by code (PHQ9, GAD7, etc.)
    #[must_use = "database operations can fail and must be handled"]
    fn get_assessment_type_by_code(&self, code: String) -> Result<AssessmentType, AssessmentError>;

    /// Get a specific assessment response by ID
    #[must_use = "database operations can fail and must be handled"]
    fn get_assessment_response(&self, id: i32) -> Result<AssessmentResponse, AssessmentError>;

    /// Delete an assessment
    #[must_use = "database operations can fail and must be handled"]
    fn delete_assessment(&self, id: i32) -> Result<(), AssessmentError>;

    /// Delete an assessment type
    #[must_use = "database operations can fail and must be handled"]
    fn delete_assessment_type(&self, id: i32) -> Result<(), AssessmentError>;
}
