name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # T203: Lint job - Clippy and rustfmt
  lint:
    name: Lint (Clippy + rustfmt)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Check formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

      - name: Run Clippy
        working-directory: src-tauri
        run: cargo clippy -- -D warnings

  # T204: Backend tests with coverage
  backend-tests:
    name: Backend Tests (Rust)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Run tests
        working-directory: src-tauri
        run: cargo test --lib --verbose

      - name: Run integration tests
        working-directory: src-tauri
        run: cargo test --test '*' --verbose

  # T205: Frontend tests with coverage enforcement
  frontend-tests:
    name: Frontend Tests (Vitest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate SvelteKit files
        run: npm run check

      - name: Run tests with coverage
        run: npm run test:coverage -- --run

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false

  # T208: Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Generate coverage
        working-directory: src-tauri
        run: cargo llvm-cov --lib --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: src-tauri/lcov.info
          flags: backend
          fail_ci_if_error: false

  # T206 + T209: Multi-platform build with artifacts
  build:
    name: Build - ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: 'linux'
            artifact_path: 'src-tauri/target/release/bundle/appimage/*.AppImage'
          - platform: macos-latest
            target: x86_64-apple-darwin
            artifact_name: 'macos'
            artifact_path: 'src-tauri/target/release/bundle/dmg/*.dmg'
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: 'windows'
            artifact_path: 'src-tauri/target/release/bundle/msi/*.msi'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri app
        run: npm run tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mental-health-tracker-${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: warn

  # Verification job - runs after all tests pass
  verify:
    name: Verification Complete
    needs: [lint, backend-tests, frontend-tests, coverage, build]
    runs-on: ubuntu-latest
    steps:
      - name: All checks passed
        run: echo "âœ… All CI checks passed successfully!"
