
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
/**
 * Submit a completed assessment
 */
async submitAssessment(request: SubmitAssessmentRequest) : Promise<Result<AssessmentResponse, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("submit_assessment", { request }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Delete an assessment response
 */
async deleteAssessment(id: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_assessment", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Get all available assessment types
 */
async getAssessmentTypes() : Promise<Result<AssessmentType[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_assessment_types") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Get questions for a specific assessment type
 */
async getAssessmentQuestions(assessmentTypeCode: string) : Promise<Result<AssessmentQuestion[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_assessment_questions", { assessmentTypeCode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Get assessment history with optional filtering
 */
async getAssessmentHistory(assessmentTypeCode: string | null, fromDate: string | null, toDate: string | null, limit: number | null) : Promise<Result<AssessmentResponse[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_assessment_history", { assessmentTypeCode, fromDate, toDate, limit }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Get a single assessment response by ID
 */
async getAssessmentResponse(id: number) : Promise<Result<AssessmentResponse, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_assessment_response", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Get the most recent assessment for a specific type
 */
async getLatestAssessment(assessmentTypeCode: string) : Promise<Result<AssessmentResponse | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_latest_assessment", { assessmentTypeCode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * Assessment question
 */
export type AssessmentQuestion = { number: number; text: string; options: string[] }
/**
 * Assessment response with calculated score
 */
export type AssessmentResponse = { id: number; assessment_type: AssessmentType; responses: number[]; total_score: number; severity_level: string; completed_at: string; notes: string | null }
/**
 * Assessment type (PHQ-9, GAD-7, CES-D, OASIS)
 */
export type AssessmentType = { id: number; code: string; name: string; description: string | null; question_count: number; min_score: number; max_score: number }
/**
 * Request to submit assessment
 */
export type SubmitAssessmentRequest = { assessment_type_code: string; responses: number[]; notes: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
