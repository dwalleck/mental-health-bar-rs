// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	async greet(name: string): Promise<string> {
		return await TAURI_INVOKE('greet', { name })
	},
	/**
	 * Submit a completed assessment
	 */
	async submitAssessment(
		request: SubmitAssessmentRequest
	): Promise<Result<AssessmentResponse, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('submit_assessment', { request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Delete an assessment response
	 */
	async deleteAssessment(id: number): Promise<Result<null, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('delete_assessment', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Delete an assessment type (defensive - prevents deletion if children exist)
	 */
	async deleteAssessmentType(id: number): Promise<Result<null, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('delete_assessment_type', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Get all available assessment types
	 */
	async getAssessmentTypes(): Promise<Result<AssessmentType[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_assessment_types') }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Get questions for a specific assessment type
	 */
	async getAssessmentQuestions(
		assessmentTypeCode: string
	): Promise<Result<AssessmentQuestion[], string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_assessment_questions', { assessmentTypeCode }),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Get assessment history with optional filtering
	 */
	async getAssessmentHistory(
		assessmentTypeCode: string | null,
		fromDate: string | null,
		toDate: string | null,
		limit: number | null
	): Promise<Result<AssessmentResponse[], string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_assessment_history', {
					assessmentTypeCode,
					fromDate,
					toDate,
					limit,
				}),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Get a single assessment response by ID
	 */
	async getAssessmentResponse(id: number): Promise<Result<AssessmentResponse, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_assessment_response', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * Get the most recent assessment for a specific type
	 */
	async getLatestAssessment(
		assessmentTypeCode: string
	): Promise<Result<AssessmentResponse | null, string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_latest_assessment', { assessmentTypeCode }),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async logMood(request: LogMoodRequest): Promise<Result<MoodCheckin, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('log_mood', { request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async createActivity(request: CreateActivityRequest): Promise<Result<Activity, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('create_activity', { request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async updateActivity(
		id: number,
		request: UpdateActivityRequest
	): Promise<Result<Activity, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('update_activity', { id, request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async deleteActivity(id: number): Promise<Result<null, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('delete_activity', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async deleteMoodCheckin(id: number): Promise<Result<null, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('delete_mood_checkin', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async getMoodHistory(
		fromDate: string | null,
		toDate: string | null,
		limit: number | null
	): Promise<Result<MoodCheckin[], string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_mood_history', { fromDate, toDate, limit }),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async getMoodCheckin(id: number): Promise<Result<MoodCheckin, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_mood_checkin', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async getMoodStats(
		fromDate: string | null,
		toDate: string | null
	): Promise<Result<MoodStats, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_mood_stats', { fromDate, toDate }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	async getActivities(includeDeleted: boolean): Promise<Result<Activity[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_activities', { includeDeleted }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T126: Get assessment chart data for visualization
	 */
	async getAssessmentChartData(
		code: string,
		timeRange: TimeRange,
		fromDate: string | null,
		toDate: string | null
	): Promise<Result<AssessmentChartData, string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_assessment_chart_data', {
					code,
					timeRange,
					fromDate,
					toDate,
				}),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T144: Get mood chart data for visualization
	 */
	async getMoodChartData(
		timeRange: TimeRange,
		fromDate: string | null,
		toDate: string | null,
		groupByActivity: boolean
	): Promise<Result<MoodChartData, string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('get_mood_chart_data', {
					timeRange,
					fromDate,
					toDate,
					groupByActivity,
				}),
			}
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T165: Create a new assessment schedule
	 */
	async createSchedule(
		request: CreateScheduleRequest
	): Promise<Result<AssessmentSchedule, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('create_schedule', { request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T166: Update an existing schedule
	 */
	async updateSchedule(
		id: number,
		request: UpdateScheduleRequest
	): Promise<Result<AssessmentSchedule, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('update_schedule', { id, request }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T167: Delete a schedule
	 */
	async deleteSchedule(id: number): Promise<Result<null, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('delete_schedule', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T168: Get all schedules (optionally filtered to enabled only)
	 */
	async getSchedules(enabledOnly: boolean): Promise<Result<AssessmentSchedule[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_schedules', { enabledOnly }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
	/**
	 * T169: Get a single schedule by ID
	 */
	async getSchedule(id: number): Promise<Result<AssessmentSchedule, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_schedule', { id }) }
		} catch (e) {
			if (e instanceof Error) throw e
			else return { status: 'error', error: e as any }
		}
	},
}

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

/**
 * Activity model
 */
export type Activity = {
	id: number
	name: string
	color: string | null
	icon: string | null
	created_at: string
	deleted_at: string | null
}
/**
 * Activity correlation with mood
 */
export type ActivityCorrelation = {
	activity: Activity
	average_mood: number
	checkin_count: number
}
/**
 * Activity-specific mood data for correlation analysis
 */
export type ActivityMoodData = {
	activity: Activity
	average_mood: number
	data_points: ChartDataPoint[]
}
/**
 * Assessment chart data with thresholds and statistics
 */
export type AssessmentChartData = {
	assessment_type: AssessmentType
	data_points: ChartDataPoint[]
	thresholds: ThresholdLine[]
	statistics: ChartStatistics
}
/**
 * Assessment question
 */
export type AssessmentQuestion = { number: number; text: string; options: string[] }
/**
 * Assessment response with calculated score
 */
export type AssessmentResponse = {
	id: number
	assessment_type: AssessmentType
	responses: number[]
	total_score: number
	severity_level: string
	completed_at: string
	notes: string | null
}
/**
 * Assessment schedule configuration
 */
export type AssessmentSchedule = {
	id: number
	assessment_type_id: number
	assessment_type_code: string
	assessment_type_name: string
	frequency: ScheduleFrequency
	time_of_day: string
	day_of_week: number | null
	day_of_month: number | null
	enabled: boolean
	last_triggered_at: string | null
	created_at: string
	updated_at: string
}
/**
 * Assessment type (PHQ-9, GAD-7, CES-D, OASIS)
 */
export type AssessmentType = {
	id: number
	code: string
	name: string
	description: string | null
	question_count: number
	min_score: number
	max_score: number
}
/**
 * Chart data point for time-series visualization
 */
export type ChartDataPoint = { timestamp: string; value: number; label: string | null }
/**
 * Chart statistics (min, max, average, trend)
 */
export type ChartStatistics = {
	min: number
	max: number
	average: number
	trend: TrendDirection
	total_assessments: number
}
/**
 * Request to create an activity
 */
export type CreateActivityRequest = { name: string; color: string | null; icon: string | null }
/**
 * Request to create a new schedule
 */
export type CreateScheduleRequest = {
	assessment_type_id: number
	frequency: ScheduleFrequency
	time_of_day: string
	day_of_week: number | null
	day_of_month: number | null
}
/**
 * Request to log a mood check-in
 */
export type LogMoodRequest = { mood_rating: number; activity_ids: number[]; notes: string | null }
/**
 * Mood chart data with activity breakdown
 */
export type MoodChartData = {
	data_points: ChartDataPoint[]
	activity_breakdown: ActivityMoodData[]
	statistics: MoodStatistics
}
/**
 * Mood check-in model
 */
export type MoodCheckin = {
	id: number
	mood_rating: number
	notes: string | null
	activities: Activity[]
	created_at: string
}
/**
 * Mood statistics (min, max, average, median, mode)
 */
export type MoodStatistics = {
	min: number
	max: number
	average: number
	median: number
	mode: number
	total_checkins: number
	checkins_per_day: number
}
/**
 * Mood statistics
 */
export type MoodStats = {
	average_mood: number
	total_checkins: number
	mood_distribution: { [key in number]: number }
	activity_correlations: ActivityCorrelation[]
}
/**
 * Schedule frequency options
 */
export type ScheduleFrequency = 'daily' | 'weekly' | 'biweekly' | 'monthly'
/**
 * Request to submit assessment
 */
export type SubmitAssessmentRequest = {
	assessment_type_code: string
	responses: number[]
	notes: string | null
}
/**
 * Threshold line for severity level visualization
 */
export type ThresholdLine = { label: string; value: number; color: string }
/**
 * Time range for chart data queries
 */
export type TimeRange = 'week' | 'month' | 'quarter' | 'year' | 'alltime' | 'custom'
/**
 * Trend direction for assessment scores
 */
export type TrendDirection = 'improving' | 'worsening' | 'stable'
/**
 * Request to update an activity
 */
export type UpdateActivityRequest = {
	name: string | null
	color: string | null
	icon: string | null
}
/**
 * Request to update an existing schedule
 */
export type UpdateScheduleRequest = {
	frequency: ScheduleFrequency | null
	time_of_day: string | null
	day_of_week: number | null
	day_of_month: number | null
	enabled: boolean | null
}

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE, Channel as TAURI_CHANNEL } from '@tauri-apps/api/core'
import * as TAURI_API_EVENT from '@tauri-apps/api/event'
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow'

type __EventObj__<T> = {
	listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>
	once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>
}

export type Result<T, E> = { status: 'ok'; data: T } | { status: 'error'; error: E }

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>
			}
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T]

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case 'listen':
								return (arg: any) => TAURI_API_EVENT.listen(name, arg)
							case 'once':
								return (arg: any) => TAURI_API_EVENT.once(name, arg)
							case 'emit':
								return (arg: any) => TAURI_API_EVENT.emit(name, arg)
						}
					},
				})
			},
		}
	)
}
